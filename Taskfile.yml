version: '3'

vars:
  ENV: '{{.ENV | default "dev"}}'
  TERRAFORM_DIR: ./terraform

env:
  AWS_PAGER: ""

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all
    silent: true

  # Terraform Commands
  init:
    desc: Initialize Terraform with backend for specified ENV
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform init -backend-config=environments/{{.ENV}}-backend.tfvars

  init-upgrade:
    desc: Initialize and upgrade Terraform providers
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform init -backend-config=environments/{{.ENV}}-backend.tfvars -upgrade

  validate:
    desc: Validate Terraform configuration
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform validate

  fmt:
    desc: Format Terraform files
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform fmt -recursive

  plan:
    desc: Plan Terraform changes for ENV
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform plan -var-file=environments/{{.ENV}}.tfvars

  apply:
    desc: Apply Terraform changes for ENV (with confirmation)
    dir: '{{.TERRAFORM_DIR}}'
    prompt: Are you sure you want to apply Terraform changes for {{.ENV}}?
    cmds:
      - terraform apply -var-file=environments/{{.ENV}}.tfvars

  auto-apply:
    desc: Apply Terraform changes without confirmation (CI/CD use)
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform apply -var-file=environments/{{.ENV}}.tfvars -auto-approve

  destroy:
    desc: Destroy Terraform infrastructure for ENV
    dir: '{{.TERRAFORM_DIR}}'
    prompt: Are you REALLY sure you want to destroy {{.ENV}}? This cannot be undone!
    cmds:
      - terraform destroy -var-file=environments/{{.ENV}}.tfvars

  output:
    desc: Show Terraform outputs
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform output

  clean:
    desc: Clean Terraform artifacts
    cmds:
      - rm -rf {{.TERRAFORM_DIR}}/.terraform/
      - rm -f {{.TERRAFORM_DIR}}/.terraform.lock.hcl
      - find {{.TERRAFORM_DIR}}/modules -type d -name '.terraform' -exec rm -rf {} + 2>/dev/null || true

  # Lambda Development
  lambda-deps:
    desc: Install Lambda dependencies
    cmds:
      - for: [ingestor, analyzer, slack_notifier]
        cmd: cd lambdas/{{.ITEM}} && pip install -r requirements.txt -t .

  lambda-test:
    desc: Run Lambda unit tests
    dir: lambdas
    cmds:
      - python -m pytest

  # Lambda Testing & Monitoring
  test-ingestor:
    desc: Test ingestor Lambda function
    vars:
      FUNCTION_NAME:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw ingestor_function_name
    cmds:
      - |
        aws lambda invoke \
          --function-name {{.FUNCTION_NAME}} \
          --payload '{"test": "event"}' \
          response.json
      - cat response.json
      - rm response.json

  logs-ingestor:
    desc: Tail ingestor Lambda logs
    vars:
      LOG_GROUP:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw ingestor_log_group
    cmds:
      - aws logs tail {{.LOG_GROUP}} --follow

  logs-analyzer:
    desc: Tail analyzer Lambda logs
    vars:
      LOG_GROUP:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw analyzer_log_group
    cmds:
      - aws logs tail {{.LOG_GROUP}} --follow

  logs-notifier:
    desc: Tail notifier Lambda logs
    vars:
      LOG_GROUP:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw notifier_log_group
    cmds:
      - aws logs tail {{.LOG_GROUP}} --follow

  check-dlq:
    desc: Check processing dead letter queue
    vars:
      DLQ_URL:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw processing_dlq_url
    cmds:
      - |
        aws sqs receive-message \
          --queue-url {{.DLQ_URL}} \
          --max-number-of-messages 10

  check-queue:
    desc: Check processing queue depth
    vars:
      QUEUE_URL:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw processing_queue_url
    cmds:
      - |
        aws sqs get-queue-attributes \
          --queue-url {{.QUEUE_URL}} \
          --attribute-names ApproximateNumberOfMessagesVisible

  purge-queue:
    desc: Purge processing queue
    vars:
      QUEUE_URL:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw processing_queue_url
    prompt: Are you sure you want to purge the processing queue?
    cmds:
      - aws sqs purge-queue --queue-url {{.QUEUE_URL}}

  # Backend Setup
  setup-backend:
    desc: Create S3 bucket and DynamoDB table for Terraform state
    cmds:
      - aws s3 mb s3://mcp-first-responder-terraform-state-{{.ENV}} --region us-east-1 || true
      - |
        aws s3api put-bucket-versioning \
          --bucket mcp-first-responder-terraform-state-{{.ENV}} \
          --versioning-configuration Status=Enabled
      - |
        aws dynamodb create-table \
          --table-name mcp-first-responder-terraform-locks \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --region us-east-1 || true

  # Full Deployment Workflows
  deploy:
    desc: Full deployment - init, validate, format, plan, apply
    deps: [init, validate, fmt]
    cmds:
      - task: plan
      - task: apply

  dev:
    desc: Quick dev deployment
    cmds:
      - task: deploy
        vars: { ENV: dev }

  staging:
    desc: Quick staging deployment
    cmds:
      - task: deploy
        vars: { ENV: staging }

  prod:
    desc: Quick production deployment
    cmds:
      - task: deploy
        vars: { ENV: prod }

  # Documentation
  docs:
    desc: Generate architecture documentation
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform-docs markdown table --output-file MODULE_DOCS.md modules/

  # Version Info
  version:
    desc: Show Terraform and provider versions
    dir: '{{.TERRAFORM_DIR}}'
    cmds:
      - terraform version

  # End-to-End Testing
  test-e2e:
    desc: Run end-to-end test (trigger alert and verify processing)
    vars:
      FUNCTION_NAME:
        sh: cd {{.TERRAFORM_DIR}} && terraform output -raw ingestor_function_name
    cmds:
      - |
        echo "Invoking ingestor Lambda..."
        openssl base64 -out encoded_payload -in test-event.json
        aws lambda invoke \
          --function-name {{.FUNCTION_NAME}} \
          --payload file://encoded_payload \
          response.json
      - cat response.json
      - echo ""
      # - echo "Check logs with: task logs-analyzer"
      - rm response.json
